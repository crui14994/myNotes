import{_ as s,c as a,o as t,ag as n}from"./chunks/framework.DhH5gtWF.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ThreeSDK/Animator.md","filePath":"ThreeSDK/Animator.md","lastUpdated":1750310875000}'),e={name:"ThreeSDK/Animator.md"};function l(h,i,p,r,k,d){return t(),a("div",null,i[0]||(i[0]=[n(`<h4 id="animator-模型动画" tabindex="-1">Animator 模型动画 <a class="header-anchor" href="#animator-模型动画" aria-label="Permalink to &quot;Animator 模型动画&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">注意</p><p>此方法需要使用 new MT.Animator(model)创建实例，每个模型都是独立的!</p></div><p>如何使用:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes solarized-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">// 1.将带动画的模型作为参数传入到构造函数中</span></span>
<span class="line"><span style="--shiki-light:#586E75;--shiki-light-font-weight:bold;--shiki-dark:#F97583;--shiki-dark-font-weight:inherit;">let</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;"> Animator</span><span style="--shiki-light:#859900;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#859900;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#268BD2;--shiki-dark:#79B8FF;"> MT</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">Animator</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;">model</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="实列化后的常用属性-部分" tabindex="-1">实列化后的常用属性(部分) <a class="header-anchor" href="#实列化后的常用属性-部分" aria-label="Permalink to &quot;实列化后的常用属性(部分)&quot;">​</a></h5><table tabindex="0"><thead><tr><th>属性</th><th>type</th><th>描述</th></tr></thead><tbody><tr><td>Animator.id</td><td>String</td><td>实列化后随机生成的 id</td></tr><tr><td>Animator.actions</td><td>Map 对象</td><td>模型中所有的动画列表</td></tr><tr><td>Animator.activeActions</td><td>Set 对象</td><td>模型中正在执行的动画列表</td></tr></tbody></table><h5 id="实列化后的方法" tabindex="-1">实列化后的方法 <a class="header-anchor" href="#实列化后的方法" aria-label="Permalink to &quot;实列化后的方法&quot;">​</a></h5><table tabindex="0"><thead><tr><th>方法</th><th>type</th><th>描述</th></tr></thead><tbody><tr><td>Animator.play</td><td>Function</td><td>根据名称执行动画</td></tr><tr><td>Animator.stopAll</td><td>Function</td><td>停止所有动画并清除</td></tr><tr><td>Animator.setTimeScale</td><td>Function</td><td>模型中正在执行的动画列表</td></tr></tbody></table><h4 id="animator-play-name-config-根据名称执行动画-一个或多个动画可以同时播放" tabindex="-1">Animator.play(name,config={}) 根据名称执行动画 ,一个或多个动画可以同时播放 <a class="header-anchor" href="#animator-play-name-config-根据名称执行动画-一个或多个动画可以同时播放" aria-label="Permalink to &quot;Animator.play(name,config={}) 根据名称执行动画 ,一个或多个动画可以同时播放&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">注意</p><p>此方法会返回一个动画的 action,可以用来链式调用其它方法实现不同的动画效果,如循环次数/动画时间等;</p><p>具体属性和方法参考<a href="https://threejs.org/docs/#api/zh/animation/AnimationAction" target="_blank" rel="noreferrer">AnimationAction</a>官方文档!</p></div><ul><li>@params</li></ul><table tabindex="0"><thead><tr><th>返回值</th><th>type</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>动画名称,从动画列表中获取</td><td>-</td></tr><tr><td>config.timeScale</td><td>Number</td><td>独立配置当前动作的动画播放速度</td><td>1</td></tr><tr><td>config.weight</td><td>Number</td><td>动画权重</td><td>1</td></tr><tr><td>config.0.5</td><td>Number</td><td>渐入时长</td><td>0.5</td></tr><tr><td>config.fadeOut</td><td>Number</td><td>渐出时长</td><td>0.5</td></tr><tr><td>config.exclusive</td><td>Boolean</td><td>是否排斥其他动画,为 true 时不允许其他动画播放,只能播一个</td><td>true</td></tr></tbody></table><ul><li>@returns</li></ul><table tabindex="0"><thead><tr><th>返回值</th><th>type</th><th>描述</th></tr></thead><tbody><tr><td>action</td><td>Object</td><td>AnimationAction 对象</td></tr></tbody></table><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes solarized-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">//执行单个动画,如果动画已经存在,则覆盖之前的动画</span></span>
<span class="line"><span style="--shiki-light:#586E75;--shiki-light-font-weight:bold;--shiki-dark:#F97583;--shiki-dark-font-weight:inherit;">let</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;"> action</span><span style="--shiki-light:#859900;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;"> Animator</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#586E75;--shiki-light-font-weight:bold;--shiki-dark:#F97583;--shiki-dark-font-weight:inherit;">=&gt;</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">    //可以调用官方 api 的一些属性和方法;如:</span></span>
<span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">    //action.paused = true;</span></span>
<span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">    //action.setDuration(10);</span></span>
<span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">    //5s后停止当前特定的动画</span></span>
<span class="line"><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;">    action</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">fadeOut</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D33682;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#D33682;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">// 同时播放两个动画</span></span>
<span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">// 混合动画建议通过 action.clampWhenFinished = true 避免无界动画消耗资源</span></span>
<span class="line"><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">// 混合动画建议所有激活动画的权重总和不超过 1.0</span></span>
<span class="line"><span style="--shiki-light:#586E75;--shiki-light-font-weight:bold;--shiki-dark:#F97583;--shiki-dark-font-weight:inherit;">let</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;"> waveAction</span><span style="--shiki-light:#859900;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;"> Animator</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2AA198;--shiki-dark:#9ECBFF;">&quot;Wave&quot;</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">, { weight: </span><span style="--shiki-light:#D33682;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">, exclusive: </span><span style="--shiki-light:#B58900;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#586E75;--shiki-light-font-weight:bold;--shiki-dark:#F97583;--shiki-dark-font-weight:inherit;">let</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;"> walkingAction</span><span style="--shiki-light:#859900;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;"> Animator</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#2AA198;--shiki-dark:#9ECBFF;">&quot;Walking&quot;</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">, { weight: </span><span style="--shiki-light:#D33682;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">, fadeIn: </span><span style="--shiki-light:#D33682;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">, exclusive: </span><span style="--shiki-light:#B58900;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="animator-stopall-停止模型的所有动画并清除" tabindex="-1">Animator.stopAll() 停止模型的所有动画并清除 <a class="header-anchor" href="#animator-stopall-停止模型的所有动画并清除" aria-label="Permalink to &quot;Animator.stopAll() 停止模型的所有动画并清除&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes solarized-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;">Animator</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">stopAll</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="animator-settimescale-value-全局控制当前模型时间缩放-控制全局动画速度" tabindex="-1">Animator.setTimeScale(value) 全局控制当前模型时间缩放,控制全局动画速度 <a class="header-anchor" href="#animator-settimescale-value-全局控制当前模型时间缩放-控制全局动画速度" aria-label="Permalink to &quot;Animator.setTimeScale(value) 全局控制当前模型时间缩放,控制全局动画速度&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes solarized-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#268BD2;--shiki-dark:#E1E4E8;">Animator</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#268BD2;--shiki-dark:#B392F0;">setTimeScale</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D33682;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#657B83;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#93A1A1;--shiki-light-font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;">// 2倍速</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,19)]))}const g=s(e,[["render",l]]);export{c as __pageData,g as default};
